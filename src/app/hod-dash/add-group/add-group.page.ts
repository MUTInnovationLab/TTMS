import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { ToastController, AlertController } from '@ionic/angular';
import { IonicModule } from '@ionic/angular';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { GroupService } from '../../services/group.service';

@Component({
  selector: 'app-add-group',
  standalone: true,
  imports: [IonicModule, CommonModule, FormsModule],
  templateUrl: './add-group.page.html',
  styleUrls: ['./add-group.page.scss'],
})
export class AddGroupPage {
  group: any = {
    groupType: '',
    stream: '',
    yearLevel: '',
    name: '',
    program: '',
    size: null,
  };

  constructor(
    private router: Router,
    private toastCtrl: ToastController,
    private alertCtrl: AlertController,
    private groupService: GroupService
  ) {}

  mainStreamYears() {
    if (this.group.groupType === 'Annual') {
      return ['Year 1', 'Year 2', 'Year 3'];
    } else {
      return ['Year 1 (S1 and S2)', 'Year 2 (S1 and S2)', 'Year 3 (S1 and S2)'];
    }
  }

  async saveGroup() {
    console.log('saveGroup called');
    if (!this.group.name || !this.group.yearLevel || !this.group.stream) {
      this.toast('Please fill in all required fields');
      return;
    }

    // Map form group data to Group model without id (id will be generated by Firestore)
    const newGroup = {
      id: 0, // Temporary id, Firestore will generate actual id
      name: this.group.name,
      program: this.group.program,
      year: this.group.yearLevel.includes('Year') ? parseInt(this.group.yearLevel.replace(/\D/g, '')) : 1,
      size: this.group.size
    };

    try {
      await this.groupService.addGroup(newGroup);
      await this.showAlert('Success', 'Group added successfully');
      this.router.navigate(['/hod-dash']);
    } catch (error: any) {
      console.error('Error adding group:', error);
      await this.showAlert('Error', 'Error adding group: ' + error.message);
    }
  }

  cancel() {
    this.router.navigate(['/hod-dash']);
  }

  async toast(msg: string) {
    const toast = await this.toastCtrl.create({ message: msg, duration: 2000 });
    toast.present();
  }

  async showAlert(header: string, message: string) {
    const alert = await this.alertCtrl.create({
      header,
      message,
      buttons: ['OK'],
    });
    await alert.present();
  }
}
